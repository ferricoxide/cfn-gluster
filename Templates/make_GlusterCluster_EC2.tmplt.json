{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRoleProfile" }, "" ] }
      ]
    },
    "InstallCloudWatchAgent": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CloudWatchAgentUrl" }, "" ] }
      ]
    },
    "NotGenFive": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "c5"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "m5"
              ]
            },
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "t3"
              ]
            }
          ]
        }
      ]
    },
    "UseAdminGroups": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminGroups" }, "" ] }
      ]
    },
    "UseAdminPubkeyURL": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AdminPubkeyURL" }, "" ] }
      ]
    },
    "UseAdminUsers": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminUsers" }, "" ] }
      ]
    },
    "UseComputerName": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerComputerName" }, "" ] }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseKeyPair": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyName" }, "" ] }
      ]
    },
    "UseOuPath": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerOuPath" }, "" ] }
      ]
    },
    "UseS3Source": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerS3Source" }, "false" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    },
    "UseWatchmaker": {
      "Fn::Equals": [ { "Ref": "WatchmakerAvailable" }, "true" ]
    }
  },
  "Description": "GlusterFS storage cluster CloudFormation template file.",
  "Mappings": {
    "InstanceTypeCapabilities": {
      "IsGenFive": {
        "ExternDeviceNameRoot": "/dev/sda1",
        "InternDeviceNameRoot": "/dev/nvme0n1",
        "ExternDeviceNameApp": "/dev/xvdf",
        "InternDeviceNameApp": "/dev/nvme1n1"
      },
      "PreGenFive": {
        "ExternDeviceNameRoot": "/dev/sda1",
        "InternDeviceNameRoot": "/dev/xvda",
        "ExternDeviceNameApp": "/dev/xvdf",
        "InternDeviceNameApp": "/dev/xvdf"
      }
    },
    "MultiplicationTable": {
      "1": {
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5",
        "6": "6",
        "7": "7",
        "8": "8",
        "9": "9"
      },
      "2": {
        "1": "2",
        "2": "4",
        "3": "6",
        "4": "8",
        "5": "10",
        "6": "12",
        "7": "14",
        "8": "16",
        "9": "18"
      },
      "3": {
        "1": "3",
        "2": "6",
        "3": "9",
        "4": "12",
        "5": "15",
        "6": "18",
        "7": "21",
        "8": "24",
        "9": "27"
      },
      "4": {
        "1": "4",
        "2": "8",
        "3": "12",
        "4": "16",
        "5": "20",
        "6": "24",
        "7": "28",
        "8": "32",
        "9": "36"
      },
      "5": {
        "1": "5",
        "2": "10",
        "3": "15",
        "4": "20",
        "5": "25",
        "6": "30",
        "7": "35",
        "8": "40",
        "9": "45"
      },
      "6": {
        "1": "6",
        "2": "12",
        "3": "18",
        "4": "24",
        "5": "30",
        "6": "36",
        "7": "42",
        "8": "48",
        "9": "54"
      },
      "7": {
        "1": "7",
        "2": "14",
        "3": "21",
        "4": "28",
        "5": "35",
        "6": "42",
        "7": "49",
        "8": "56",
        "9": "63"
      },
      "8": {
        "1": "8",
        "2": "16",
        "3": "24",
        "4": "32",
        "5": "40",
        "6": "48",
        "7": "56",
        "8": "64",
        "9": "72"
      },
      "9": {
        "1": "9",
        "2": "18",
        "3": "27",
        "4": "36",
        "5": "45",
        "6": "54",
        "7": "63",
        "8": "72",
        "9": "81"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "RootVolumeSize",
            "SharedVolumeType",
            "SharedVolumeSize",
            "ReplicaNum",
            "DistributionNum",
            "SubnetList",
            "SecurityGroupIds",
            "ProvisionUser",
            "KeyName",
            "AdminPubkeyURL",
            "InstanceRoleName",
            "InstanceRoleProfile"
          ]
        },
        {
          "Label": {
            "default": "Watchmaker Configuration"
          },
          "Parameters": [
            "PypiIndexUrl",
            "CfnGetPipUrl",
            "WatchmakerAvailable",
            "WatchmakerEnvironment",
            "WatchmakerConfig",
            "WatchmakerS3Source",
            "WatchmakerOuPath",
            "WatchmakerComputerName",
            "WatchmakerAdminGroups",
            "WatchmakerAdminUsers"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous Parameters"
          },
          "Parameters": [
            "BackupBucketName",
            "CloudWatchAgentUrl"
          ]
        }
      ]
    }
  },
  "Outputs": {},
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^http[s]?://.*|^$",
      "Description": "(Optional) URL of file containing admin group's SSH public-keys",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "AWS::EC2::Image::Id"
    },
    "AssociatePublicIpAddress": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Whether to give each Gluster node a public IP address (not normally required)",
      "Type": "String"
    },
    "BackupBucketName": {
      "Description": "Name of S3 Bucket used to host Gluster backups",
      "Type": "String"
    },
    "CfnGetPipUrl": {
      "AllowedPattern": "^http[s]?://.*\\.py$",
      "Default": "https://bootstrap.pypa.io/get-pip.py",
      "Description": "URL to get-pip.py",
      "Type": "String"
    },
    "CloudWatchAgentUrl": {
      "AllowedPattern": "^$|^s3://.*$",
      "Default": "",
      "Description": "(Optional) S3 URL to CloudWatch Agent installer. Example: s3://amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip",
      "Type": "String"
    },
    "DistributionNum": {
      "ConstraintDescription": "must be 1 - 9",
      "Default": "1",
      "Description": "Number of distribution.(1-9)",
      "MaxValue": "9",
      "MinValue": "1",
      "Type": "Number"
    },
    "GlusterReleasePkg": {
      "AllowedPattern": "^.*-release-gluster[0-9].*$",
      "Default": "centos-release-gluster5",
      "Description": "Name of the gluster repository-definition RPM containing the desired GlusterFS packages",
      "Type": "String"
    },
    "InstanceRoleName": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance",
      "Type": "String"
    },
    "InstanceRoleProfile": {
      "Default": "",
      "Description": "(Optional) IAM instance-role profile to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge"
      ],
      "Default": "t2.small",
      "Description": "GlusterFS node EC2 instance type",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9-]{6,12}",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "ec2-user",
      "Description": "Name for remote-administration account",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "ReplicaNum": {
      "ConstraintDescription": "must be 1 - 9",
      "Default": "2",
      "Description": "Number of replica.(1-9; 1 means no replica.)",
      "MaxValue": "9",
      "MinValue": "1",
      "Type": "Number"
    },
    "RootVolumeSize": {
      "ConstraintDescription": "Must be between 20GiB and 16384GiB.",
      "Default": "20",
      "Description": "Size in GB of the instance's root EBS volume.",
      "MaxValue": "16384",
      "MinValue": "20",
      "Type": "Number"
    },
    "SharedVolumeSize": {
      "ConstraintDescription": "Must be between 10GiB and 16384GiB.",
      "Default": "10",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"SharedVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "SharedVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"SharedVolumeDevice\" is blank",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetList": {
      "Description": "Subnets to which GlusterFS nodes may belong.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "WatchmakerAdminGroups": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain groups that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerAdminUsers": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain users that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerAvailable": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Specify if Watchmaker is available (if \"false\" all other Watchmaker-related parms will be ignored).",
      "Type": "String"
    },
    "WatchmakerComputerName": {
      "Default": "",
      "Description": "(Optional) Sets the hostname/computername within the OS",
      "Type": "String"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "dev",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    },
    "WatchmakerOuPath": {
      "AllowedPattern": "^$|^(OU=.+,)+(DC=.+)+$",
      "Default": "",
      "Description": "(Optional) DN of the OU to place the instance when joining a domain. If blank and \"WatchmakerEnvironment\" enforces a domain join, the instance will be placed in a default container. Leave blank if not joining a domain, or if \"WatchmakerEnvironment\" is \"false\"",
      "Type": "String"
    },
    "WatchmakerS3Source": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Flag that tells watchmaker to use its instance role to retrieve watchmaker content from S3",
      "Type": "String"
    }
  },
  "Resources": {
    "NodeFleet": {
      "Properties": {
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "LaunchConfigurationName": { "Ref": "NodeLaunchConfig" },
        "MaxSize": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "MinSize": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                "-",
                [
                  { "Ref": "AWS::StackName" },
                  "GlusterNode"
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": { "Ref": "SubnetList" }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "NodeLaunchConfig": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "commands": {
              "1-install-keyfile": {
                "command": "bash -xe /etc/cfn/scripts/admkey.sh"
              }
            },
            "files": {
              "/etc/cfn/files/AdminKeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/cfn/scripts/admkey.sh": {
              "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /etc/cfn/files/AdminKeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "configSets": {
            "init": [
              "setup",
              {
                "Fn::If": [
                  "UseAdminPubkeyURL",
                  "admkey-install",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              {
                "Fn::If": [
                  "InstallCloudWatchAgent",
                  "cw-agent-install",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              {
                "Fn::If": [
                  "UseWatchmaker",
                  [
                    "watchmaker-install",
                    "watchmaker-launch"
                  ],
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "installGlusterRelease",
              "startGlusterd",
              "GlusterSetup",
              "makeBrick",
              "makeVolume",
              "finalize",
              "reboot"
            ]
          },
          "cw-agent-install": {
            "commands": {
              "01-get-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "install -Dbm 700 -o root -g root /dev/null /etc/cfn/scripts/AmazonCloudWatchAgent.zip &&",
                      " aws s3 cp ",
                      { "Ref": "CloudWatchAgentUrl" },
                      " /etc/cfn/scripts/AmazonCloudWatchAgent.zip"
                    ]
                  ]
                }
              },
              "02-extract-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum -y install unzip &&",
                      "unzip /etc/cfn/scripts/AmazonCloudWatchAgent.zip -d /etc/cfn/scripts/aws-cw-agent"
                    ]
                  ]
                }
              },
              "10-install-cloudwatch-agent": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      " bash -xe install.sh &&",
                      " /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl",
                      " -a fetch-config -m ec2 -c",
                      " file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s"
                    ]
                  ]
                },
                "cwd": "/etc/cfn/scripts/aws-cw-agent"
              }
            },
            "files": {
              "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{",
                      "  \"logs\": {\n",
                      "    \"logs_collected\": {\n",
                      "      \"files\": {\n",
                      "        \"collect_list\": [\n",
                      "          {\n",
                      "            \"file_path\": \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "GlusterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"cloudwatch_agent_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/cfn-init.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "GlusterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"cfn_init_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/messages\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "GlusterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"messages_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/watchmaker/watchmaker.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "GlusterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"watchmaker_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/watchmaker/salt_call.debug.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "GlusterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"salt_call_debug_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " },\n",
                      "          {\n",
                      "            \"file_path\": \"/var/log/glusterfs/glusterd.log\",\n",
                      "            \"log_group_name\": \"",
                      {
                        "Fn::If": [
                          "InstallCloudWatchAgent",
                          { "Ref": "GlusterLCLogGroup" },
                          { "Ref": "AWS::NoValue" }
                        ]
                      },
                      "\",\n",
                      "            \"log_stream_name\": \"glusterd_logs_{instance_id}\",\n",
                      "            \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                      " }\n",
                      "        ]\n",
                      " }\n",
                      " },\n",
                      "    \"log_stream_name\": \"default_logs_{instance_id}\"\n",
                      " }\n",
                      "}\n"
                    ]
                  ]
                }
              }
            }
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource NodeFleet",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            " --url ",
                            "https://cloudformation.",
                            { "Ref": "AWS::Region" },
                            ".",
                            { "Ref": "AWS::URLSuffix" }
                          ]
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "GlusterEnvs": {
            "files": {
              "/etc/cfn/Gluster.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "S3_BACKUP_BUCKET=",
                      { "Ref": "BackupBucketName" },
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000640",
                "owner": "root"
              }
            }
          },
          "GlusterSetup": {
            "files": {
              "/etc/cfn/scripts/volumeSetup.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "# Script to configure an OS for use with Gluster\n",
                      "#\n",
                      "#################################################################\n",
                      "PROGNAME=\"$(basename \"${0}\")\"\n",
                      "VOLNAME=\"${1:-vol01}\"\n",
                      "VOLMOUNT=\"${3:-/var/glusterfs/${VOLNAME}}\"\n",
                      "REPLCNT=\"replica ${2:-2}\"\n",
                      "if [[ ${REPLCNT} =~ .*2 ]]\n",
                      "then\n",
                      "   FORCE=\"force\"\n",
                      "fi\n",
                      "\n",
                      "##\n",
                      "## Set up an error logging and exit-state\n",
                      "function err_exit {\n",
                      "   local ERRSTR=\"${1}\"\n",
                      "   local SCRIPTEXIT=${2:-1}\n",
                      "\n",
                      "   # Our output channels\n",
                      "   echo \"${ERRSTR}\" > /dev/stderr\n",
                      "   logger -t \"${PROGNAME}\" -p kern.crit \"${ERRSTR}\"\n",
                      "\n",
                      "   # Need our exit to be an integer\n",
                      "   if [[ ${SCRIPTEXIT} =~ ^[0-9]+$ ]]\n",
                      "   then\n",
                      "      exit \"${SCRIPTEXIT}\"\n",
                      "   else\n",
                      "      exit 1\n",
                      "   fi\n",
                      "}\n",
                      "\n",
                      "# Create location to mount the created volume\n",
                      "printf \"Creating %s... \" \"${VOLMOUNT}\"\n",
                      "if [[ -d ${VOLMOUNT} ]]\n",
                      "then\n",
                      "   echo \"Already exists\"\n",
                      "else\n",
                      "   install -Ddm 0755 \"${VOLMOUNT}\" && echo \"Success\" || \\\n",
                      "     err_exit \"Failed creating ${VOLMOUNT}\"\n",
                      "fi\n",
                      "\n",
                      "\n",
                      "sleep $[ ( ${RANDOM} %60 ) + ( ${RANDOM} %60 ) ]\n",
                      "\n",
                      "# Find our peers\n",
                      "for HOST in $( cat /etc/glusterhosts )\n",
                      "do\n",
                      "   gluster peer probe ${HOST} || err_exit \"Peer-probe failed for ${HOST}\"\n",
                      "done\n",
                      "\n",
                      "sleep 15\n",
                      "\n",
                      "# Create a replicated volume\n",
                      "printf \"Attempting to create %s... \" \"${VOLNAME}\"\n",
                      "if [[ $(gluster volume info \"${VOLNAME}\" > /dev/null 2>&1 )$? -eq 0 ]]\n",
                      "then\n",
                      "   echo \"Volume '${VOLNAME}' already exists\"\n",
                      "else\n",
                      "   gluster volume create \"${VOLNAME}\" ${REPLCNT} \\\n",
                      "      $( sed -r \"s!( +|\t+|$)!:${VOLMOUNT} !g\" /etc/glusterhosts ) \\\n",
                      "      ${FORCE} && echo \"Success\" || err_exit \"Creation of '${VOLNAME}' failed\"\n",
                      "\n",
                      "   printf \"Attempting to start %s... \" \"${VOLNAME}\"\n",
                      "   gluster volume start \"${VOLNAME}\" || err_exit \"Failed to start Gluster-volume '${VOLNAME}'\"\n",
                      "fi\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "installGlusterRelease": {
            "commands": {
              "00-AddGlusterReleas": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "yum install -y ",
                      { "Ref": "GlusterReleasePkg" },
                       "\n"
                    ]
                  ]
                }
              }
            }
          },
          "makeBrick": {
            "commands": {
              "00formatFS": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                       "mkfs.ext4 -I 512 ",
                       {
                         "Fn::If": [
                           "NotGenFive",
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "PreGenFive",
                               "InternDeviceNameApp"
                             ]
                           },
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "IsGenFive",
                               "InternDeviceNameApp"
                             ]
                           }
                         ]
                       },
                       "\n"
                    ]
                  ]
                }
              },
              "01makeBrickDir": {
                "command": "install -D -d -m 0750 /bricks/vol01/"
              },
              "02mountBrickDir": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                       "mount -t ext4 ",
                       {
                         "Fn::If": [
                           "NotGenFive",
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "PreGenFive",
                               "InternDeviceNameApp"
                             ]
                           },
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "IsGenFive",
                               "InternDeviceNameApp"
                             ]
                           }
                         ]
                       },
                       " /bricks/vol01/\n"
                    ]
                  ]
                }
              },
              "03modifyFstab": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                       "echo '",
                       {
                         "Fn::If": [
                           "NotGenFive",
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "PreGenFive",
                               "InternDeviceNameApp"
                             ]
                           },
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "IsGenFive",
                               "InternDeviceNameApp"
                             ]
                           }
                         ]
                       },
                       " /bricks/vol01 ext4 defaults,noatime 1 1' >> /etc/fstab\n"
                    ]
                  ]
                }
              }
            }
          },
          "makeVolume": {
            "commands": {
              "00-list-hosts": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "aws ec2 describe-instances --region ",
                      { "Ref": "AWS::Region" },
                      " --filter 'Name=tag-key,Values=Name','Name=tag-value,Values=",
                      {
                        "Fn::Join": [
                          "-",
                          [
                            { "Ref": "AWS::StackName" },
                            "GlusterNode"
                          ]
                        ]
                      },
                      "' --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text",
                      "> /etc/glusterhosts"
                    ]
                  ]
                }
              },
              "01-firewalld": {
                "command": "firewall-offline-cmd --add-service=glusterfs && systemctl restart firewalld",
                "ignoreErrors": "true"
              },
              "02-gluster-config": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/etc/cfn/scripts/volumeSetup.sh vol01 ",
                      { "Ref": "ReplicaNum" },
                      " /bricks/vol01/shared\n"
                    ]
                  ]
                }
              }
            }
          },
          "mountVolume": {
            "commands": {
              "00makeMountPoint": {
                "command": "mkdir -p /mnt/glusterfs/vol01",
                "ignoreErrors": "true"
              },
              "01mountVolume": {
                "command": "mount -t glusterfs $(head -n 1 /etc/glusterhosts|cut -f1):/vol01 /mnt/glusterfs/vol01",
                "ignoreErrors": "true"
              },
              "02modifyFstab": {
                "command": "echo \"$(head -n 1 glusterhosts|cut -f1):/vol01 /mnt/glusterfs/vol01 glusterfs defaults,noatime 0 0\" >> /etc/fstab",
                "ignoreErrors": "true",
                "test": "test -d /mnt/glusterfs/vol01/lost+found/"
              }
            },
            "packages": {
              "yum": {
                "glusterfs": [],
                "glusterfs-fuse": []
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +2 \"Rebooting so all config-options take effect...\" &"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRoleName" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "url=",
                            "https://cloudformation.",
                            { "Ref": "AWS::Region" },
                            ".",
                            { "Ref": "AWS::URLSuffix" }
                          ]
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.NodeLaunchConfig.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource NodeLaunchConfig",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRoleName" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            " --url ",
                            "https://cloudformation.",
                            { "Ref": "AWS::Region" },
                            ".",
                            { "Ref": "AWS::URLSuffix" }
                          ]
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            }
          },
          "startGlusterd": {
            "packages": {
              "yum": {
                "glusterfs-server": []
              }
            },
            "services": {
              "sysvinit": {
                "glusterd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            },
            "files": {
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "curl --silent --show-error --retry 5 -L ",
                      { "Ref": "CfnGetPipUrl" },
                      " | python - --index-url=\"$PYPI_URL\" 'wheel<0.30.0;python_version<\"2.7\"' 'wheel;python_version>=\"2.7\"'",
                      "\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade 'pip<10' 'setuptools<37;python_version<\"2.7\"' 'setuptools;python_version>=\"2.7\"' boto3\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --exclude-states scap*scan",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \"",
                                { "Ref": "WatchmakerOuPath" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseS3Source",
                          " --s3-source",
                          ""
                        ]
                      }
                    ]
                  ]
                }
              },
              "15-salt-nofips": {
                "command": "salt-call --local ash.fips_disable"
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": { "Ref": "AssociatePublicIpAddress" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": { "Ref": "RootVolumeSize" },
              "VolumeType": "gp2"
            }
          },
          {
            "DeviceName": {
              "Fn::If": [
                "NotGenFive",
                {
                  "Fn::FindInMap": [
                     "InstanceTypeCapabilities",
                     "PreGenFive",
                     "ExternDeviceNameApp"
                  ]
                },
                {
                  "Fn::FindInMap": [
                    "InstanceTypeCapabilities",
                    "IsGenFive",
                    "ExternDeviceNameApp"
                  ]
                }
              ]
            },
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": { "Ref": "SharedVolumeSize" },
              "VolumeType": { "Ref": "SharedVolumeType" }
            }
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRoleProfile" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceMonitoring": true,
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": {
          "Fn::If": [
            "UseKeyPair",
            { "Ref": "KeyName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "SecurityGroups": { "Ref": "SecurityGroupIds" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                "\n",
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                     { "Ref": "ProvisionUser" },
                     "\n",
                "\n",
                "growpart:\n",
                "  mode: auto\n",
                "  devices: [ '/dev/xvda', '/dev/xvda2', '/dev/nvme0n1p2' ]\n",
                "  ignore_growroot_disabled: false\n",
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                "\n",
                "#!/bin/bash -xe\n",
                "\n",
                {
                  "Fn::If": [
                    "UseComputerName",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "# Override DCHP-set hostname\n",
                          "hostnamectl set-hostname $( echo ",
                          { "Ref": "WatchmakerComputerName" },
                          "| sed \"s/",
                          {
                            "Fn::Select": [
                              "0",
                              {
                                "Fn::Split": [
                                  ".",
                                  { "Ref": "WatchmakerComputerName" }
                                ]
                              }
                            ]
                          },
                          "/&-$( printf '%02x' $( hostname -i | sed 's/\\./ /g') )/\" )\n",
                          "\n"
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "# Populate /etc/hosts with local hotname\n",
                "printf \"%s\\t%s %s\\n\" \\\n",
                "\"$( hostname -I )\" \"$( hostname -f )\" \\\n",
                "\"$( hostname -s )\" >> /etc/hosts\n",
                "\n",
                "# Deactivate IPv6 references in /etc/hosts\n",
                "sed -i '/^:/s/^/## /' /etc/hosts\n",
                "\n",
                "# Extend any available LVM PVs\n",
                "if [[ -x $( which pvs ) ]]\n",
                "then\n",
                "   LVMPVS=($(pvs --noheadings -o pv_name))\n",
                "   for PV in \"${LVMPVS[@]}\"\n",
                "   do\n",
                "      pvresize ${PV}\n",
                "   done\n",
                "\n",
                "   vgdisplay -s\n",
                "fi\n",
                "\n",
                "# Export AWS ENVs\n",
                "test -r /etc/aws/models/endpoints.json && export AWS_DATA_PATH=/etc/aws/models || true\n",
                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export AWS_DEFAULT_REGION=",
                { "Ref": "AWS::Region" },
                "\n\n",
                "# Update cfn-bootstrapper hash method\n",
                "PYVERS=$(python -c 'import sys;",
                " version=sys.version_info[:2];",
                " print(\"{0}.{1}\".format(*version))')\n",
                "sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                "/util.py\n",
                "\n",
                "# Apply any patches available via configured yum repository\n",
                "yum update -y\n",
                "\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                { "Ref": "NodeWaitHandle" },
                "'\n",
                "  exit 1\n",
                "}\n",
                "\n",
                "# Install packages\n",
                "/opt/aws/bin/cfn-init -v -c init",
                " --stack ",
                { "Ref": "AWS::StackId" },
                " --resource NodeLaunchConfig",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRoleName" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::Join": [
                      "",
                      [
                        " --url ",
                        "https://cloudformation.",
                        { "Ref": "AWS::Region" },
                        ".",
                        { "Ref": "AWS::URLSuffix" }
                      ]
                    ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                " || error_exit 'Failed to run cfn-init'\n",
                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 '",
                { "Ref": "NodeWaitHandle" },
                "'\n",
                "\n",
                "--===============3585321300151562773==--"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "GlusterLCLogGroup": {
      "Condition": "InstallCloudWatchAgent",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/ec2/lx/",
              { "Ref": "AWS::StackName" }
            ]
          ]
        }
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "NodeWaitCondition": {
      "DependsOn": "NodeFleet",
      "Properties": {
        "Count": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "Handle": { "Ref": "NodeWaitHandle" },
        "Timeout": "1800"
      },
      "Type": "AWS::CloudFormation::WaitCondition"
    },
    "NodeWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }
  }
}
